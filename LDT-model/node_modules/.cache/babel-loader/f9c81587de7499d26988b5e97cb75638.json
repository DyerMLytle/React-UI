{"ast":null,"code":"var _jsxFileName = \"/Users/dlytle/recnt-Proj/React-UI/LDT-model/src/components/ThreeD.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport * as THREE from \"three\";\nimport './styles.css';\n/* function Box(props) {\n  // This reference will give us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 2.0 : 1.0}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'red' : 'orange'} />\n    </mesh>\n  )\n} */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cylinder(props) {\n  _s();\n\n  // This reference will give us direct access to the THREE.Mesh object\n  const ref = useRef(); // Subscribe this component to the render-loop, rotate the mesh every frame\n\n  useFrame((state, delta) => ref.current.rotation.x += 0.01); // Return the view, these are regular Threejs elements expressed in JSX\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: ref,\n    scale: 2.0,\n    children: [/*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n      args: [1, 1, 5, 32, 32, true]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: 'red'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Cylinder, \"8QVLrcMdYxPUkj6ry5zpyt6J6X8=\", false, function () {\n  return [useFrame];\n});\n\n_c = Cylinder;\n\nfunction ThreeD() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"threedcdiv\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        fov: 75,\n        position: [0, 0, 20]\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Cylinder, {\n        side: THREE.DoubleSide,\n        position: [-1.2, 1, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n}\n\n_c2 = ThreeD;\nexport default ThreeD;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cylinder\");\n$RefreshReg$(_c2, \"ThreeD\");","map":{"version":3,"sources":["/Users/dlytle/recnt-Proj/React-UI/LDT-model/src/components/ThreeD.js"],"names":["React","useRef","Canvas","useFrame","THREE","Cylinder","props","ref","state","delta","current","rotation","x","ThreeD","fov","position","DoubleSide"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,cAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB;AACA,QAAMC,GAAG,GAAGN,MAAM,EAAlB,CAFuB,CAGvB;;AACAE,EAAAA,QAAQ,CAAC,CAACK,KAAD,EAAQC,KAAR,KAAmBF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,IAA0B,IAA9C,CAAR,CAJuB,CAKvB;;AACA,sBACE,qBACMN,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAE,GAHT;AAAA,4BAIE;AAAkB,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,IAAlB;AAAxB;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAsB,MAAA,KAAK,EAAE;AAA7B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAfQF,Q;UAIPF,Q;;;KAJOE,Q;;AAiBT,SAASQ,MAAT,GAAkB;AAChB,sBACI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP;AAArB,OAAhB;AAAA,8BAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAY,QAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEX,KAAK,CAACY,UAAtB;AAAkC,QAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,CAAP,EAAU,CAAV;AAA5C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAUD;;MAXQH,M;AAaT,eAAeA,MAAf","sourcesContent":["import React, { useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport * as THREE from \"three\";\n\nimport './styles.css';\n\n\n/* function Box(props) {\n  // This reference will give us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 2.0 : 1.0}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'red' : 'orange'} />\n    </mesh>\n  )\n} */\n\nfunction Cylinder(props) {\n  // This reference will give us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={2.0} >\n      <cylinderGeometry args={[1, 1, 5, 32, 32, true]} />\n      <meshStandardMaterial color={'red'} />\n    </mesh>\n  )\n}\n\nfunction ThreeD() {\n  return (\n      <div id=\"threedcdiv\" >\n        <Canvas camera={{ fov: 75, position: [0, 0, 20] }}>\n          {/* <color attach=\"background\" args={[\"blue\"]} /> */}\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} />\n          <Cylinder side={THREE.DoubleSide} position={[-1.2, 1, 0]} />\n        </Canvas>\n      </div>\n  );\n}\n\nexport default ThreeD;"]},"metadata":{},"sourceType":"module"}